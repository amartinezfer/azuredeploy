---
- name: Instalar server azure
  hosts: ansible_host_vm
  remote_user: ansible_host
  vars:
    ansible_ssh_private_key_file: "{{ hostvars[inventory_hostname]['ansible_ssh_private_key_file'] }}"
    ansible_python_interpreter: /usr/bin/python3   
  become: true 
  collections:
    - containers.podman
  tasks:
   - name: Añadir clave GPG del repositorio de Podman
     apt_key:
      url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/Release.key
      state: present

   - name: Añadir el repositorio de Podman
     apt_repository:
      repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /
      state: present
      update_cache: yes
   - name: Actualizar repositorios apt
     apt:
        update_cache: yes
   - name: Asegurarse python instalado    
     ansible.builtin.package:
        name:
          - python3
          - python3-pip
        state: present   
   - name: Establecer Python3 como versión predeterminada
     raw: update-alternatives --install /usr/bin/python python /usr/bin/python3 1
   - name: Instalar PyYAML con pip
     pip:
        name: pyyaml
        state: present
    
   - name: Instalar Kubernetes con pip
     pip:
        name: kubernetes
        state: present
   - name: Instalar Podman
     apt:
        name:
           - podman
        state: present
   - name: añadir Kubernetes repository key     
     apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

   - name: añadir  Kubernetes repository  
     apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
   - name: Install kubectl on Ubuntu 18       
     apt:
        name: kubectl
        state: present     
   - name: Login registry
     podman_login:
      username: "{{hostvars[inventory_hostname]['ansible_register_user']}}"
      password: "{{hostvars[inventory_hostname]['ansible_register_pass']}}"
      registry: "{{hostvars[inventory_hostname]['ansible_register']}}"
   - name: Crear directorio build
     file:
        path: /tmp/dockerfile
        state: directory
        owner: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        group: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        mode: '0755'
    
   - name: copy Dockerfile web
     copy:
        src: ../image/httpd
        dest: /tmp/dockerfile
        owner: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        group: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        mode: '0644'
   - name: copy Dockerfile mongo
     copy:
        src: ../image/mongo
        dest: /tmp/dockerfile
        owner: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        group: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        mode: '0644'
   - name: Pull  image httpd
     podman_image:
      name: docker://httpd:latest
   - name: Pull an image mongo
     podman_image:
      name: docker://mongo:latest

   - name: Build and push imagen http
     podman_image:
      name: apache
      tag: "casopractico2"
      path: /tmp/dockerfile/httpd      
      build:
        cache: no
        force_rm: yes
        format: oci
        annotation:
          app: apache
          function: proxy
          info: Webapp
      push: true
      username: "{{hostvars[inventory_hostname]['ansible_register_user']}}"
      password: "{{hostvars[inventory_hostname]['ansible_register_pass']}}"
      push_args:
          dest: "{{hostvars[inventory_hostname]['ansible_register']}}/vm"
      
   - name:  Build and push  image mongo 
     podman_image:
      name: mongo
      tag: "casopractico2"
      path: /tmp/dockerfile/mongo      
      build:
        cache: no
        force_rm: yes
        format: oci
        annotation:
          app: mongo
          function: bbdd
          info: mongodb
      push: true
      username: "{{hostvars[inventory_hostname]['ansible_register_user']}}"
      password: "{{hostvars[inventory_hostname]['ansible_register_pass']}}"
      push_args:
         dest: "{{hostvars[inventory_hostname]['ansible_register']}}/kube"
      

   - name: Arrancar  httpd image.
     podman_container:
          name: apache
          image: "{{hostvars[inventory_hostname]['ansible_register']}}/vm/apache:casopractico2"
          state: started
          ports:
            - "8443:8443"
          generate_systemd:
            path: /etc/systemd/system/
            restart_policy: always
            time: 120
            names: true
   - name: start httpd service
     systemd: state=started name=container-apache daemon_reload=yes   
   - name: copy Mongo Kube deploy
     template:
        src: ./template/mongoApp.j2
        dest: /tmp/mongoApp.yaml
        owner: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        group: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        mode: '0644'  
   - name: copy kubeconfig
     copy:
        src: ./kube.config
        dest: /tmp/kube.config
        owner: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        group: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
        mode: '0644'    
   - name: Create and Deployment leyendo un archivo de yaml
     kubernetes.core.k8s:
      state: present
      src: /tmp/mongoApp.yaml
      kubeconfig: /tmp/kube.config
      
        
